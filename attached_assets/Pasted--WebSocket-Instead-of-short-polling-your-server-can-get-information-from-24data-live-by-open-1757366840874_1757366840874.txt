
 WebSocket:
,
Instead of short-polling, your server can get information from 24data live by opening a connection to our WebSocket. A maximum of 3 connections can be made to the WebSocket. Your server should only need one. Make sure your Origin header is not set, or is empty when requesting from your server. Browsers will always set the Origin header, and can't be used to connect to this WebSocket. wss://24data.ptfs.app/wss You should receive a stream of data in this format:
{
  "t": "EVENT_TYPE",
  "d": "any" // Object or Array. See `Event Types` section below for corresponding data types.
}
Event Types
,
"ACFT_DATA"         : AircraftData from the ATC 24 main server. "EVENT_ACFT_DATA"   : AircraftData from the ATC 24 event server. "FLIGHT_PLAN"       : Stream of submitted FlightPlans for the ATC 24 main server. "EVENT_FLIGHT_PLAN" : Stream of submitted FlightPlans for the ATC 24 event server. "CONTROLLERS"       : Position[] claimed in #online-atc. "ATIS"              : ATIS for an airport when it's been updated. (edited)
[
3:38 PM
]
Types:
,
AircraftData:
,
Object served with Key-Value pairs, callsigns being the key and corresponding data being the value.
{
  "Callsign-1001": { /*...*/ },
  "Callsign-1002": { /*...*/ }
}
Example:
{
  "Shamrock-1337": {                // Object key is the callsign of the aircraft.
    "heading": 290,                 // Heading in degrees. 360 is North.
    "playerName": "PTC_Helper",     // Roblox username of the pilot.
    "altitude": 3069,               // Altitude in ft of the aircraft. 1 stud = 1.8372 ft for this conversion.
    "aircraftType": "Airbus A380",  // Aircraft type.
    "position": {                   // Position of the aircraft in studs away from the origin.
        "y": -23349,                // -y is North.
        "x": -10906                 // -x is West.
    },
    "speed": 299,                   // Airspeed as reported in knots. NOTE: Not equivalent to nautical miles per hour. See details below.
    "wind": "357/15",               // Wind in degrees/speed in knots. See note for knots.
    "isOnGround"?: false,           // If the aircraft is in Taxiing mode. NOTE: This property is not included helicopter aircraft data.
    "groundSpeed": 208.660516305461 // Groundspeed as reported in knots. See note for knots
  },
  // ...
}
NOTE The planekit uses knots internally, and applies 1 knot = 0.5442765 studs/sec to aircraft. This is actually lower than the real conversion, but is done so that runways can be smaller and islands feel farther apart. The real conversion between knots and studs/sec is 1 knot = 0.918650795 studs/sec (Derived from 1 stud = 0.56 metres, the scale used in-game. Full derivation is left as an exercise to the reader). If you need to do calculations related to expected distance and nautical miles, Real knots = game knots * 0.592172785. 3307.14286 studs = 1 NMi. (edited)
[
3:38 PM
]
Additionally, aircraft are further slowed linearly dependent on altitude above 2,000ft in order to increase time spent in cruise. This is not shown in speed, but is in groundSpeed.
 FlightPlan
,
A single filed Flight Plan. Only accessible through WebSocket. Example:
{
  "robloxName": "PTC_Helper",       // Roblox username of command operator.
  "callsign": "Shamrock-1337",      // Set by user in command.
  "realcallsign": "Shamrock-1337",  // Also set by user, but should be in-game callsign.
  "aircraft": "A330",               // Aircraft filed.
  "flightrules": "IFR",             // IFR/VFR.
  "departing": "IMLR",              // Origin airport.
  "arriving": "IGRV",               // Destination airport.
  "route": "N/A",                   // Route if specified, "N/A" otherwise.
  "flightlevel": "040"              // Flight level.
}
Position[]:
,
Array of Positions Example:
[
  {
    "holder": "AutumnHTDG", // Roblox username of the position holder.
    "claimable": false,     // If the position is claimable.
    "airport": "IRFD",      // Position's airport (Or Area Control Centre).
    "position": "TWR",      // Position type: GND, TWR, CTR. (CTR only exists for Area Control Centres)
    "queue": [              // Array of Roblox usernames of people queued. [0] is first.
      "Orange12345",        // Number 1 in queue.
      "TreelonsMusk",       // Number 2 in queue.
    ]
  },
  {
    "holder": null,
    "claimable": true,
    "airport": "IRFD",
    "position": "GND",
    "queue": []
  },
  // ...
]
(edited)
[
3:38 PM
]
ATIS:
,
ATIS Information for an airport. Example:
{
  "airport": "ISAU",      // Airport ICAO code.
  "letter": "T",          // ATIS Designator letter.
  "content": "ISAU ATIS INFO T TIME 1922Z\nDEP RWY 26 ARR RWY 26\n094/12 9999 OVC025 13/11 Q1013\nACKNOWLEDGE RECEIPT OF INFORMATION T\nAND ADVISE AFCT TYPE ON FIRST CONTACT WITH SAUTHEMPTONA\nEND OF INFORMATION T\n",
  "lines": [
    "ISAU ATIS INFO T TIME 1922Z",
    "DEP RWY 26 ARR RWY 26",
    "094/12 9999 OVC025 13/11 Q1013",
    "ACKNOWLEDGE RECEIPT OF INFORMATION T",
    "AND ADVISE AFCT TYPE ON FIRST CONTACT WITH SAUTHEMPTONA",
    "END OF INFORMATION T"
  ],
  "editor": "PTC_Helper"  // Roblox Username of who updated this airport's ATIS last. Can be `null`.
},
The text within lines and content are identical, lines is just split at \n. NOTE editor can be null if ATC 24 Bot is unable to find who last updated the ATIS. (edited)
[
3:38 PM
]
Additional notes
,
This API should be considered unstable (Major version 0 using SemVer). It is provided AS IS, as a courtesy to the ATC 24 3rd party developer community. We make no guarantees to the quality or the stability of the information provided. (edited)
[
3:38 PM
]
[
3:38 PM
]
[
3:38 PM
]
[
3:38 PM
]
[
3:38 PM
]

